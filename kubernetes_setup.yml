- name: Choose random etcd host
  hosts: localhost
  connection: local
  tags: ectdauth
  tasks:
  - add_host:
      name: "{{ item }}"
      groups: elected_etcd
    with_random_choice: "{{ (groups['etcd'] | intersect(groups[resource_group])) | random }}"

- name: Configure etcd authentication and ACLs
  hosts: elected_etcd
  become: yes
  tags: ectdauth
  tasks:
    - debug: var=inventory_hostname
    - name: Copy etcd root certificate
      copy: src=certs/etcd-root.pem dest=/root/etcd-root.pem mode=0640
    - name: Copy etcd root certificate key
      copy: src=certs/etcd-root-key.pem dest=/root/etcd-root-key.pem mode=0640
    - set_fact:
        etcd_root_key: "{{Â lookup('file', 'certs/etcd_root.key') }}"
    - name: Check if API user already exists
      shell: ETCDCTL_API=3 etcdctl --endpoints https://{{ ansible_hostname }}:2379 --cacert /etc/kubernetes/ssl/ca.pem --cert /root/etcd-root.pem --key /root/etcd-root-key.pem user get kube-apiserver-{{ resource_group }}
      register: existing_user
      ignore_errors: True
    - meta: end_play
      when: existing_user.rc == 0
    - name: Create root user
      shell: echo {{ etcd_root_key }} | ETCDCTL_API=3 etcdctl --endpoints https://{{ ansible_hostname }}:2379 --cacert /etc/kubernetes/ssl/ca.pem --cert /root/etcd-root.pem --key /root/etcd-root-key.pem user add root --interactive=false
      when: existing_user.rc == 1
    - name: Enable etcd authentication
      shell: ETCDCTL_API=3 etcdctl --endpoints https://{{ ansible_hostname }}:2379 --cacert /etc/kubernetes/ssl/ca.pem --cert /root/etcd-root.pem --key /root/etcd-root-key.pem auth enable
      when: existing_user.rc == 1
    - name: Create cluster user
      shell: echo {{ etcd_root_key }} | ETCDCTL_API=3 etcdctl --endpoints https://{{ ansible_hostname }}:2379 --cacert /etc/kubernetes/ssl/ca.pem --cert /root/etcd-root.pem --key /root/etcd-root-key.pem user add kube-apiserver-{{ resource_group }} --interactive=false
# TODO: enforce ACL


- name: Initialize etcd nodes
  hosts: etcd:&{{ resource_group }}
  become: yes
  tags: ectd
  tasks:
    - name: Create certificates directory
      file: path=/etc/kubernetes/ssl state=directory
    - name: Copy CA SSL certificate
      copy: src=certs/ca.pem dest=/etc/kubernetes/ssl/ca.pem mode=0644
    - name: Copy node certificate
      copy: src=certs/{{ ansible_fqdn }}-worker.pem dest=/etc/kubernetes/ssl/worker.pem mode=0644 owner=etcd
    - name: Copy node private key
      copy: src=certs/{{ ansible_fqdn }}-worker-key.pem dest=/etc/kubernetes/ssl/worker-key.pem mode=0600 owner=etcd
    - name: Create locksmithd systemd dropin dir
      file: path=/etc/systemd/system/locksmithd.service.d state=directory
    - name: Write locksmithd configuration
      template: src=lock-remote.conf dest=/etc/systemd/system/locksmithd.service.d/40-lock-remote.conf
    - name: Create etcd config dir
      file: path=/etc/systemd/system/etcd-member.service.d state=directory
    - name: Configure etcd
      template: src=etcd-unit.conf dest=/etc/systemd/system/etcd-member.service.d/20-clct-etcd-member.conf
    - name: Reload systemd daemons
      shell: systemctl daemon-reload
    - name: Start etcd
      service: name=etcd-member state=started enabled=yes
    - name: Restart locksmithd
      service: name=locksmithd state=restarted enabled=yes
    - name: Wait for etcd to spin up
      wait_for: port=2379 timeout=60

- name: Initialize Kubernetes master
  hosts: master:&{{ resource_group }}
  become: yes
  tags: master
  tasks:
    - name: Create certificates directory
      file: path=/etc/kubernetes/ssl state=directory
    - name: Copy CA SSL certificate
      copy: src=certs/ca.pem dest=/etc/kubernetes/ssl/ca.pem mode=0644
    - name: Copy API certificate
      copy: src=certs/apiserver.pem dest=/etc/kubernetes/ssl/apiserver.pem mode=0644
    - name: Copy API private key
      copy: src=certs/apiserver-key.pem dest=/etc/kubernetes/ssl/apiserver-key.pem mode=0600
    - name: Copy k8s secret
      copy: src=certs/enc-config-{{ resource_group }}.yaml dest=/etc/kubernetes/enc-config.yaml mode=0600
    - name: Create locksmithd systemd dropin dir
      file: path=/etc/systemd/system/locksmithd.service.d state=directory
    - name: Write locksmithd configuration
      template: src=lock-remote.conf dest=/etc/systemd/system/locksmithd.service.d/40-lock-remote.conf
    - name: Create Docker systemd dropin dir
      file: path=/etc/systemd/system/docker.service.d state=directory
    - name: Write Docker systemd dropin
      copy: src=50-docker-opts.conf dest=/etc/systemd/system/docker.service.d/50-docker-opts.conf mode=0644
    - name: Create Kubelet unit
      template: src=kubelet-master.service dest=/etc/systemd/system/kubelet.service
    - name: Create manifest dir
      file: path=/etc/kubernetes/manifests state=directory
    - name: Configure API server
      template: src=apiserver.yaml dest=/etc/kubernetes/manifests/kube-apiserver.yaml
    - name: Copy kubeconfig
      copy: src=kubeconfig-master dest=/etc/kubernetes/kubeconfig
    - name: Copy sample tokens
      copy: src=tokens.csv dest=/etc/kubernetes/tokens.csv mode=0600 force=no
    - name: Copy proxy config
      template: src=kube-proxy.conf dest=/etc/kubernetes/proxy.conf
    - name: Configure Kube-proxy
      template: src=kube-proxy-master.yaml dest=/etc/kubernetes/manifests/kube-proxy.yaml
    - name: Configure Controller Manager
      template: src=controller-manager.yaml dest=/etc/kubernetes/manifests/kube-controller-manager.yaml
    - name: Configure Scheduler
      template: src=scheduler.yaml dest=/etc/kubernetes/manifests/kube-scheduler.yaml
    - name: Reload systemd daemons
      shell: systemctl daemon-reload
    - name: Restart locksmithd
      service: name=locksmithd state=restarted enabled=yes
    - name: Start Kubelet
      service: name=kubelet state=started enabled=yes

- name: Initialize Kubernetes nodes
  hosts: node:&{{ resource_group }}
  become: yes
  tags: node
  tasks:
    - name: Create certificates directory
      file: path=/etc/kubernetes/ssl state=directory
    - name: Copy CA SSL certificate
      copy: src=certs/ca.pem dest=/etc/kubernetes/ssl/ca.pem mode=0644
    - name: Copy node certificate
      copy: src=certs/{{ ansible_fqdn }}-worker.pem dest=/etc/kubernetes/ssl/worker.pem mode=0644
    - name: Copy node private key
      copy: src=certs/{{ ansible_fqdn }}-worker-key.pem dest=/etc/kubernetes/ssl/worker-key.pem mode=0600
    - name: Copy proxy certificate
      copy: src=certs/proxy.pem dest=/etc/kubernetes/ssl/proxy.pem mode=0644
    - name: Copy proxy private key
      copy: src=certs/proxy-key.pem dest=/etc/kubernetes/ssl/proxy-key.pem mode=0600
    - name: Create locksmithd systemd dropin dir
      file: path=/etc/systemd/system/locksmithd.service.d state=directory
    - name: Write locksmithd configuration
      template: src=lock-remote.conf dest=/etc/systemd/system/locksmithd.service.d/40-lock-remote.conf
    - name: Create Docker systemd dropin dir
      file: path=/etc/systemd/system/docker.service.d state=directory
    - name: Write Docker systemd dropin
      copy: src=50-docker-opts.conf dest=/etc/systemd/system/docker.service.d/50-docker-opts.conf mode=0644
    - name: Create Kubelet unit
      template: src=kubelet.service dest=/etc/systemd/system/kubelet.service
    - name: Create manifest dir
      file: path=/etc/kubernetes/manifests state=directory
    - name: Setup kubelet kubeconfig
      template: src=worker-kubeconfig.yaml dest=/etc/kubernetes/worker-kubeconfig.yaml
    - name: Setup proxy kubeconfig
      template: src=proxy-kubeconfig.yaml dest=/etc/kubernetes/proxy-kubeconfig.yaml
    - name: Copy proxy config
      template: src=kube-proxy.conf dest=/etc/kubernetes/proxy.conf
    - name: Configure Kube-proxy
      template: src=kube-proxy.yaml dest=/etc/kubernetes/manifests/kube-proxy.yaml
    - name: Reload systemd daemons
      shell: systemctl daemon-reload
    - name: Restart locksmithd
      service: name=locksmithd state=restarted enabled=yes
    - name: Start Kubelet
      service: name=kubelet state=started enabled=yes

- name: Wait for API
  hosts: master:&{{ resource_group }}
  tags: master
  tasks:
    - name: Wait for API to spin up
      wait_for: port=8080 timeout=360
